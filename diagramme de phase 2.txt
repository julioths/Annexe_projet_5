import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

beta=0.3
sigma=0.2
gamma=0.1
mu=0.01
N=1000

def euler_sier(S0,E0,I0,R0,dt=0.5,T=300):
 S,E,I,R=[S0],[E0],[I0],[R0]
 n=int(T/dt)
 for k in range(n):
  s,e,i,r=S[-1],E[-1],I[-1],R[-1]
  Nk=s+e+i+r
  dS=mu*Nk-beta*s*i/Nk-mu*s
  dE=beta*s*i/Nk-(sigma+mu)*e
  dI=sigma*e-(gamma+mu)*i
  dR=gamma*i-mu*r
  S.append(s+dt*dS)
  E.append(e+dt*dE)
  I.append(i+dt*dI)
  R.append(r+dt*dR)
 return S,E,I,R




fig=plt.figure(figsize=(12,8))
ax=fig.add_subplot(111,projection='3d')

conds=[(990,5,5,0),(980,10,10,0),(950,30,20,0),(970,0,30,0),(995,0,5,0),(900,80,20,0)]

for s0,e0,i0,r0 in conds:
 S,E,I,R=euler_sier(s0,e0,i0,r0)
 ax.plot(S,I,R,alpha=0.8)



R0b=beta/(gamma+mu)
I_eq=mu*(R0b*sigma/(sigma+mu)-1)*N/beta
S_eq=(gamma+mu)*N/beta
E_eq=(gamma+mu)*I_eq/sigma
R_eq=gamma*I_eq/mu



ax.scatter(S_eq,I_eq,R_eq,color='red',s=100,edgecolors='black')

ax.set_xlabel("S")
ax.set_ylabel("I")
ax.set_zlabel("R")
plt.tight_layout()
plt.show()
